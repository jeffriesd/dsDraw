// should throw exception because unknown CObj 'c'
// -- works as of 9/25/19
define test1() {
  b = bst();
  a = array();

  interpolate({
    a : { endPos : { x : 300, y : 400 }, endTime :  3  },
    b : { endPos : { x : 300, y : 400 }, endTime :  3  },
    c : { endPos : { x : 300, y : 400 }, endTime :  3  }
  });
}


// regular function (should work)
define test2() {
  
  b = bst();
  a = array();

  interpolate({
    a : { endPos : { x : 300, y : 400 }, endTime :  3  },
    b : { endPos : { x : 300, y : 400 }, endTime :  3  }
  });
}


// test condition startTime > endtime (should fail)
// works as of 9/25/19
define test3() {
  a = array();

  interpolate({
    a : { endPos : { x : 300, y : 400 }, startTime : 5, endTime :  3  }
  });
}

define test2() {
  
  b = bst();
  a = array();

  interpolate({
    a : { endPos : { x : 500, y : 400 }, endTime :  3  },
    b : { endPos : { x : 500, y : 400 }, startTime : 2, endTime :  2.3  }
  });
}

define test2() {
  a = array();

  interpolate({
    a : { 
      endPos : { x : 400, y : 500 }, 
      ctrl1 : { x : 200, y : 650 },
      ctrl2 : { x : 300, y : 350 },
      startTime : 0,
      endTime : 1
    }
  }, 20);
}

// translate towards -pi/4
// in a timed sequence



// all collapse to one point 
// with delays


define collapsePoints() {
  n = 10;
  xs = [0] * 10;
  ids = [0] * n;
  x_space = 50;
  y_space = 200;

  for (i = 0; i < n; i = i + 1) {
    ids[i] = "c" + str(i);
    xs[i] = $(ids[i], conn());
    resize(xs[i], 30, 30);
    tr(xs[i], -x_space*i, 0);
  }
  repaint();

  ps = [0] * n;
  pds = {};

  for (i = 0; i < n; i = i + 1) {
    ps[i] = {};
    ps[i]["startTime"] = i / 10;
    ps[i]["endTime"] = 0.5 + i / 10;
    ps[i]["endPos"] = { x : 400, y : 100 };
    pds[ids[i]] = ps[i];
  }

  interpolate(pds);
  return ids;
}


define collapsePointswithArrow() {
  n = 10;
  circles = [0] * 10;
  ids = [0] * n;
  x_space = 50;
  y_space = 200;
  for (i = 0; i < n; i = i + 1) {
    ids[i] = "c" + str(i);
    circles[i] = $(ids[i], conn());
    resize(circles[i], 30, 30);
    tr(circles[i], -x_space*i, 0);
  }
  repaint();
  ps = [0] * n;
  pds = {};
  for (i = 0; i < n; i = i + 1) {
    pathDict = {
      startTime : i / 10,
      endTime : 0.5 + i / 10,
      ctrl1 : { x : circles[i].x() - 150 , y : 300 },
      ctrl2 : { x : circles[i].x() + 150 , y : 300 },
      endPos : { x : circles[i].x(), y : circles[i].y() }
    };
    pds[ids[i]] = pathDict;
    if (i == 4) {
      a = arrow(circles[i], circles[i], { dash : true });
      a.setCtrl1(pathDict["ctrl1"]["x"], pathDict["ctrl1"]["y"]);
      a.setCtrl2(pathDict["ctrl2"]["x"], pathDict["ctrl2"]["y"]);
    }
  }
  interpolate(pds);
  return ids;
}

define collapsePoints() {
  n = 10;
  circles = [0] * 10;
  ids = [0] * n;
  x_space = 50;
  y_space = 200;
  for (i = 0; i < n; i = i + 1) {
    ids[i] = "c" + str(i);
    circles[i] = $(ids[i], conn());
    resize(circles[i], 30, 30);
    tr(circles[i], -x_space*i, 0);
  }
  repaint();
  ps = [0] * n;
  pds = {};
  for (i = 0; i < n; i = i + 1) {
    pathDict = {
      startTime : i / 10,
      endTime : 0.5 + i / 10,
      ctrl1 : { x : circles[i].x() - 150 , y : 300 },
      ctrl2 : { x : circles[i].x() + 150 , y : 300 },
      endPos : { x : circles[i].x(), y : circles[i].y() }
    };
    pds[circles[i].label()] = pathDict;
  }
  interpolate(pds, 100);
  return ids;
}
collapsePoints();
